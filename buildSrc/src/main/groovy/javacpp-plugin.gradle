plugins {
	id 'java-library'
	id 'java-test-fixtures'
	id 'maven-publish'
}

ext {
	javacppPlatform = "windows-x86_64"
}

repositories {
    mavenCentral()
}

dependencies {
	api "org.bytedeco:javacpp:$javacppVersion"
	implementation "org.bytedeco:javacpp:$javacppVersion:$javacppPlatform"
}

sourceSets {
	cpp {
    	java {
    		srcDirs = ["${projectDir}/src/main/cpp"]
    	}
	}
    
	javacpp {
		compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
		java {
			srcDirs = ["${buildDir}/javacpp/java"]
		}
		resources {
			srcDirs = ["${buildDir}/javacpp/resources"]
		}
	}
	
	test {
		compileClasspath += sourceSets.javacpp.output
        runtimeClasspath += sourceSets.javacpp.output
	}
	
	testFixtures {
		compileClasspath += sourceSets.javacpp.output
        runtimeClasspath += sourceSets.javacpp.output
	}
}

configurations {
    javacppImplementation.extendsFrom implementation
    javacppRuntimeOnly.extendsFrom runtimeOnly
}

task javacppGenerate(type: JavaExec, dependsOn: compileJava) {
	ext {
		outputDir = "${buildDir}/javacpp/java"
		props = "${javacppPlatform}"
		presetClass = "org.bytedeco.**"
	}
	systemProperties['javacpp.plugin.project.buildDir'] = "${buildDir}"
	
	mainClass = 'org.bytedeco.javacpp.tools.Builder'
				
	// port 5005; can debug using eclipse Remote Java Application
	debug = false
	
	doFirst {
		// Executable jars can have only _one_ jar on the classpath.
		classpath = files(configurations.runtimeClasspath.asPath)
		workingDir = sourceSets.main.java.outputDir
	
		if("".equals(presetClass))
		{
			def input = sourceSets.main.java.classesDirectory.get()
			fileTree(input).each {
				args it.toString()
					   .replace(input.toString(), "")
					   .replace("\\", "/")
					   .replace(".class", "")
					   .substring(1)
			}
		}
		else 
		{
			args presetClass
		}
		// arguments to pass to the application
		
		args "-properties", "${props}"
		args "-d", "${outputDir}"
		
		sourceSets.cpp.java.srcDirs.each {
			args "-Dplatform.includepath=${it}"
		}
	}
}

compileJavacppJava.dependsOn javacppGenerate

task javacppJniGenerate(type: JavaExec, dependsOn: compileJavacppJava) {
	ext {
		outputDir = "${buildDir}/javacpp/resources/${javacppPlatform}"
		props = "${javacppPlatform}"
		presetClass = "org.bytedeco.**"
	}
	
	mainClass = 'org.bytedeco.javacpp.tools.Builder'
	
	// port 5005; can debug using eclipse Remote Java Application
	debug = false
	
	doFirst {
		javacppGenerate.systemProperties.each{ key, value -> systemProperties[key] = value}
	
		// Executable jars can have only _one_ jar on the classpath.
		classpath = files(sourceSets.javacpp.compileClasspath)
		workingDir = sourceSets.javacpp.java.outputDir
	
		/*def input = sourceSets.javacpp.java.classesDirectory.get()
		fileTree(input).each {
			args it.toString()
				   .replace(input.toString(), "")
				   .replace("\\", "/")
				   .replace(".class", "")
				   .substring(1)
		}*/
		
		args presetClass
		args "-properties", "${props}"
		args "-d", "${outputDir}"
		
		sourceSets.cpp.java.srcDirs.each {
			args "-Dplatform.includepath=${it}"
		}
	}
}

task javacppNativeJar(type: Jar){
	archiveClassifier = "${javacppPlatform}"
	from sourceSets.javacpp.resources
}

jar.dependsOn javacppJniGenerate, javacppNativeJar

jar {
	from sourceSets.javacpp.java.outputDir
}

java {
    withJavadocJar()
    withSourcesJar()
}

sourcesJar {
	from sourceSets.javacpp.java
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact source: javacppNativeJar, classifier: "${javacppPlatform}", extension: "jar"
            versionMapping {
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
}

// tasks['cleanEclipse'].dependsOn clean
// tasks['eclipseClasspath'].dependsOn javacppJniGenerate
