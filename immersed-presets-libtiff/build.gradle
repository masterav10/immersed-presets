plugins {
	id 'javacpp-plugin'
}

ext {
	libTiffHome = "${buildDir}/unpacked/dist/libtiff-v$libtiffVersion"
	libTiffPlatform = "x64"
	
	libJpegHome = "${buildDir}/unpacked/dist/jpeg-9e"
	libJpegTurboHome = "${buildDir}/unpacked/dist/libjpeg-turbo-3.0.0"
}

def libTiffConfig = ["Release"]

version "$libtiffVersion-$javacppPresetVersion"

repositories {
    ivy {
        url 'https://gitlab.com/'

		// https://gitlab.com/libtiff/libtiff/-/archive/v4.6.0/libtiff-v4.6.0.zip
        patternLayout {
            artifact '/[organisation]/[module]/-/archive/v[revision]/[module]-v[revision].[ext]'
        }

        // This is required in Gradle 6.0+ as metadata file (ivy.xml) 
        // is mandatory. Docs linked below this code section
        metadataSources { artifact() } 
    }
    
    ivy {
    	url 'https://github.com/'
    	
    	// libjpeg-turbo/libjpeg-turbo/archive/refs/tags/3.0.0.zip
        patternLayout {
            artifact '/[organisation]/[module]/archive/refs/tags/[revision].[ext]'
        }
        
        // This is required in Gradle 6.0+ as metadata file (ivy.xml) 
        // is mandatory. Docs linked below this code section
        metadataSources { artifact() } 
    }
}

configurations {
	zip
}

dependencies {
    api "org.bytedeco:javacpp:$javacppVersion"
    implementation "org.bytedeco:javacpp:$javacppVersion:$javacppPlatform"
	
	api "org.bytedeco:systems:$javacppPresetVersion"
	implementation "org.bytedeco:systems:$javacppPresetVersion:$javacppPlatform"
	
	zip "libtiff:libtiff:$libtiffVersion@zip"
	zip "libjpeg-turbo:libjpeg-turbo:3.0.0@zip"
}

task unzipLibJpegTurbo(type: Copy) {
	def zipPath = project.configurations.zip.find {it.name.startsWith("libjpeg-turbo") }
	def zipFile = file(zipPath)
	def outputDir = file("${buildDir}/unpacked/dist")
	
	from zipTree(zipFile)
	into outputDir
}

task generateLibJpegTurboProjects(type:Exec, dependsOn: unzipLibJpegTurbo) {
	workingDir "${libJpegTurboHome}"
	println "-G\"NMake Makefiles\""
	
	commandLine "cmake", 
				"-G", "\"NMake Makefiles\"",
				"-D", "CMAKE_BUILD_TYPE=Release",
				"."
}

task compileLibJpegTurbo(type:Exec, dependsOn: generateLibJpegTurboProjects) {
	workingDir "${libJpegTurboHome}"
	commandLine "nmake"
}

task unzipLibTiff(type: Copy) {
	def zipPath = project.configurations.zip.find {it.name.startsWith("libtiff") }
	def zipFile = file(zipPath)
	def outputDir = file("${buildDir}/unpacked/dist")
	
	from zipTree(zipFile)
	into outputDir
}

task cmakeLibTiff(type:Exec, dependsOn: [unzipLibTiff, compileLibJpegTurbo]) {
	workingDir "$libTiffHome"

	def jpegIncDir = "${libJpegTurboHome}".replace("\\", "/")
	def jpegBinaryDir = "${jpegIncDir}/Release/x64"

	commandLine "cmake",
				"-D", "jpeg=ON",
	            "-D", "JPEG_INCLUDE_DIR=${jpegIncDir}",
	            "-D", "JPEG_LIBRARY=${jpegBinaryDir}",
	            "-D", "jpeg12=ON",
	          	"-D", "JPEG12_INCLUDE_DIR=${jpegIncDir}",
	          	"-D", "JPEG12_LIBRARY=${jpegBinaryDir}",
	            "."
}

for(String config : libTiffConfig)
{
	tasks.register("compileLibTiff${config}", Exec) {
		workingDir "$libTiffHome"
	
		commandLine "msbuild", 
					"${libTiffHome}/tiff.sln",
					"-t:ALL_BUILD",
					"-p:Configuration=${config}",
					"-p:Platform=${libTiffPlatform}"
	}

	tasks["compileLibTiff${config}"].dependsOn cmakeLibTiff
	javacppGenerate.dependsOn tasks["compileLibTiff${config}"]
}

javacppGenerate {
	systemProperties['libtiff.src'] = "${libTiffHome}/libtiff"
	
	for(String config : libTiffConfig)
	{
		systemProperties["libtiff.bin.${config}"] = "${libTiffHome}/libtiff/${config}"
	}
	
	debug = false
}

javacppJniGenerate {
	debug = false

	doFirst {
		args "-nodelete"
		args "-Xcompiler", "/Z7"
	}
}