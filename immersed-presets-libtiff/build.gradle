plugins {
	id 'javacpp-plugin'
}

ext {
	vcPlatform = "x64"
	vcConfig = "Release"
	
	nativeLibHome = "${buildDir}/unpacked/dist"
	libTiffHome = "${nativeLibHome}/libtiff-v$libtiffVersion"
	libJpegTurboHome = "${nativeLibHome}/libjpeg-turbo-3.0.0"
	libDeflateHome = "${nativeLibHome}/libdeflate-1.19"
	zlibHome = "${nativeLibHome}/zlib-1.3"
	jBigHome = "${nativeLibHome}/jbigkit-2.1/libjbig"
	lercHome = "${nativeLibHome}/lerc-2.2"
	lzmaHome = "${nativeLibHome}/xz-5.4.4"
	zstdHome = "${nativeLibHome}/zstd-1.5.5"
	webpHome = "${nativeLibHome}/libwebp-1.3.2"
}

version "$libtiffVersion-$javacppPresetVersion"

repositories {
    ivy {
        url 'https://gitlab.com/'

    	// libtiff/libtiff/-/archive/v4.6.0/libtiff-v4.6.0.zip
        patternLayout {
            artifact '/[organisation]/[module]/-/archive/v[revision]/[module]-v[revision].[ext]'
        }

        // This is required in Gradle 6.0+ as metadata file (ivy.xml) 
        // is mandatory. Docs linked below this code section
        metadataSources { artifact() } 
    }
   	    
    ivy {
    	url 'https://www.cl.cam.ac.uk/'
    	
    	// ~mgk25/jbigkit/download/jbigkit-2.1.tar.gz
        patternLayout {
            artifact '/~mgk25/[organisation]/download/[module]-[revision].[ext]'
        }
        
        // This is required in Gradle 6.0+ as metadata file (ivy.xml) 
        // is mandatory. Docs linked below this code section
        metadataSources { artifact() } 
    }
    
    ivy {
    	url 'https://github.com/'
    	
        patternLayout {
           	// madler/zlib/releases/download/v1.3/zlib13.zip
	        artifact '/[organisation]/[module]/releases/download/v[revision]/zlib13.[ext]'
    		
            // Esri/lerc/archive/refs/tags/v2.2.zip
            artifact '/Esri/[module]/archive/refs/tags/v[revision].[ext]'
            
            // libjpeg-turbo/libjpeg-turbo/archive/refs/tags/3.0.0.zip
	        artifact '/[organisation]/[module]/archive/refs/tags/[revision].[ext]'
	        
	        // ebiggers/libdeflate/archive/refs/tags/v1.19.zip
	        // tukaani-project/xz/archive/refs/tags/v5.4.4.zip
    		// facebook/zstd/archive/refs/tags/v1.5.5.zip
	        // webmproject/libwebp/archive/refs/tags/v1.3.2.zip
	        artifact '/[organisation]/[module]/archive/refs/tags/v[revision].[ext]'
        }
        
        // This is required in Gradle 6.0+ as metadata file (ivy.xml) 
        // is mandatory. Docs linked below this code section
        metadataSources { artifact() } 
    }
}

configurations {
	zip
}

dependencies {
    api "org.bytedeco:javacpp:$javacppVersion"
    implementation "org.bytedeco:javacpp:$javacppVersion:$javacppPlatform"
	
	api "org.bytedeco:systems:$javacppPresetVersion"
	implementation "org.bytedeco:systems:$javacppPresetVersion:$javacppPlatform"
	
	zip "libtiff:libtiff:$libtiffVersion@zip"
	zip "libjpeg-turbo:libjpeg-turbo:3.0.0@zip"
	zip "madler:zlib:1.3@zip"
	zip "ebiggers:libdeflate:1.19@zip"
	zip "jbigkit:jbigkit:2.1@tar.gz"
	zip "lerc:lerc:2.2@zip"
	zip "tukaani-project:xz:5.4.4@zip"
	zip "facebook:zstd:1.5.5@zip"
	zip "webmproject:libwebp:1.3.2@zip"
}

task unzipLibJpegTurbo(type: Copy) {
	def zipPath = project.configurations.zip.find {it.name.startsWith("libjpeg-turbo") }
	def zipFile = file(zipPath)
	def outputDir = file("${nativeLibHome}")
	
	from zipTree(zipFile)
	into outputDir
}

task generateLibJpegTurboProjects(type:Exec, dependsOn: unzipLibJpegTurbo) {
	workingDir "${libJpegTurboHome}"
	
	commandLine "cmake", 
				"-G", "\"NMake Makefiles\"",
				"-D", "CMAKE_BUILD_TYPE=${vcConfig}",
				"."
}

task compileLibJpegTurbo(type:Exec, dependsOn: generateLibJpegTurboProjects) {
	workingDir "${libJpegTurboHome}"
	commandLine "nmake"
}

task unzipZlib(type: Copy) {
	def zipPath = project.configurations.zip.find {it.name.startsWith("zlib") }
	def zipFile = file(zipPath)
	def outputDir = file("${nativeLibHome}")
	
	from zipTree(zipFile)
	into outputDir
}

task generateZlibProjects(type:Exec, dependsOn: unzipZlib) {
	workingDir "${zlibHome}"
	
	commandLine "cmake", 
				"."
}

task compileZlib(type:Exec, dependsOn: generateZlibProjects) {
	workingDir "${zlibHome}"

	commandLine "msbuild", 
				"${zlibHome}/zlib.sln",
				"-t:ALL_BUILD",
				"-p:Configuration=${vcConfig}",
				"-p:Platform=${vcPlatform}"
}

task unzipLibDeflate(type: Copy) {
	def zipPath = project.configurations.zip.find {it.name.startsWith("libdeflate") }
	def zipFile = file(zipPath)
	def outputDir = file("${nativeLibHome}")
	
	from zipTree(zipFile)
	into outputDir
}

task generateLibDeflate(type:Exec, dependsOn: unzipLibDeflate) {
	workingDir "${libDeflateHome}"
	
	commandLine "cmake", 
				"-D", "CMAKE_BUILD_TYPE=${vcConfig}",
				"."
}

task buildLibDeflateLibrary(type:Exec, dependsOn: generateLibDeflate) {
	workingDir "${libDeflateHome}"

	commandLine "msbuild", 
				"${libDeflateHome}/libdeflate.sln",
				"-t:ALL_BUILD",
				"-p:Configuration=${vcConfig}",
				"-p:Platform=${vcPlatform}"
}

task unzipJBig(type: Copy) {
	def tarPath = project.configurations.zip.find {it.name.startsWith("jbigkit") }
	def tarFile = file(tarPath)
	def outputDir = file("${nativeLibHome}")
	
	from tarTree(tarFile)
	into outputDir
}

task compileJBig(type:Exec, dependsOn: unzipJBig) {
	workingDir "${jBigHome}"

	// derived using visual studio
	commandLine "cl.exe",
				"/c", "/Zi", "/nologo", "/W3", "/WX-", "/diagnostics:column", "/sdl", "/O2", "/Oi", 
				"/GL", "/D NDEBUG", "/D _LIB", "/D _UNICODE", "/D UNICODE", "/Gm-", "/EHsc", "/MD", 
				"/GS", "/Gy", "/fp:precise", "/permissive-", "/Zc:wchar_t", "/Zc:forScope", "/Zc:inline", 
				"/Fd\"LIBJBIG.PDB\"", "/external:W3", "/Gd", "/TC", "/FC", 
				"JBIG.C", "JBIG_AR.C"
}

task buildJBigLibrary(type:Exec, dependsOn: compileJBig) {
	workingDir "${jBigHome}"

	// derived using visual studio
	commandLine "lib.exe",
				"/OUT:\"libjbig.lib\"", "/NOLOGO", "/MACHINE:X64", "/LTCG", 
				"JBIG.OBJ", "JBIG_AR.OBJ"
}

task unzipLerc(type: Copy) {
	def zipPath = project.configurations.zip.find {it.name.startsWith("lerc") }
	def zipFile = file(zipPath)
	def outputDir = file("${nativeLibHome}")
	
	from zipTree(zipFile)
	into outputDir
}

task compileLercLibrary(type:Exec, dependsOn: unzipLerc) {
	workingDir "${lercHome}/src/LercLib"

	commandLine "cl.exe", 
				"/c", "/nologo", "/W3", "/WX-", "/diagnostics:column", "/sdl", "/O2", "/Ob2", "/Oi", "/Ot", "/D", 
				"_MBCS", "/Gm-", "/EHsc", "/MD", "/GS", "/Gy", "/fp:precise", "/Zc:wchar_t", "/Zc:forScope", 
				"/Zc:inline", "/Fd\"LERC.PDB\"", "/external:W3", "/Gd", "/TP", "/FC", "BITMASK.CPP", "BITSTUFFER2.CPP", 
				"HUFFMAN.cpp", "LERC.CPP", "LERC1DECODE\\BITSTUFFER.CPP", "LERC1DECODE\\CNTZIMAGE.CPP", "LERC2.CPP", 
				"LERC_C_API_IMPL.CPP", "RLE.CPP"
}

task buildLercLibrary(type:Exec, dependsOn: compileLercLibrary) {
	workingDir "${lercHome}/src/LercLib"
	
	commandLine "lib.exe", 
				"/OUT:\"LercLib.lib\"", "/NOLOGO", "/MACHINE:X64", "BITMASK.OBJ", "BITSTUFFER2.OBJ", "HUFFMAN.OBJ", 
				"LERC.OBJ", "BITSTUFFER.OBJ", "CNTZIMAGE.OBJ", "LERC2.OBJ", "LERC_C_API_IMPL.OBJ", "RLE.OBJ"
}

task unzipLibLzma(type: Copy) {
	def zipPath = project.configurations.zip.find {it.name.startsWith("xz") }
	def zipFile = file(zipPath)
	def outputDir = file("${nativeLibHome}")
	
	from zipTree(zipFile)
	into outputDir
}

task generateLibLzma(type:Exec, dependsOn: unzipLibLzma) {
	workingDir "${lzmaHome}"
	
	commandLine "cmake", 
				"-G", "\"NMake Makefiles\"",
				"-D", "CMAKE_BUILD_TYPE=${vcConfig}",
				"."
}

task buildLibLzmaLibrary(type:Exec, dependsOn: generateLibLzma) {
	workingDir "${lzmaHome}"

	commandLine "msbuild", 
				"${lzmaHome}/windows/vs2019/xz_win.sln",
				"-t:liblzma",
				"-p:Configuration=${vcConfig}",
				"-p:Platform=${vcPlatform}"
}

task unzipZstd(type: Copy) {
	def zipPath = project.configurations.zip.find {it.name.startsWith("zstd") }
	def zipFile = file(zipPath)
	def outputDir = file("${nativeLibHome}")
	
	from zipTree(zipFile)
	into outputDir
}

task generateZstdProjects(type:Exec, dependsOn: unzipZstd) {
	workingDir "${zstdHome}/build/cmake"
	
	commandLine "cmake", 
				"."
}

task buildZstdLibrary(type:Exec, dependsOn: generateZstdProjects) {
	workingDir "${zstdHome}/build/cmake"

	commandLine "msbuild", 
				"${zstdHome}/build/cmake/zstd.sln",
				"-t:ALL_BUILD",
				"-p:Configuration=${vcConfig}",
				"-p:Platform=${vcPlatform}"
}

task unzipWebp(type: Copy) {
	def zipPath = project.configurations.zip.find {it.name.startsWith("libwebp") }
	def zipFile = file(zipPath)
	def outputDir = file("${nativeLibHome}")
	
	from zipTree(zipFile)
	into outputDir
}

task buildWebpLibrary(type:Exec, dependsOn: unzipWebp) {
	workingDir "${webpHome}"
	
	commandLine "nmake", 
				"/f", "Makefile.vc",
				"CFG=release-static",
				"RTLIBCFG=static",
				"OBJDIR=output"
}

task unzipLibTiff(type: Copy) {
	def zipPath = project.configurations.zip.find {it.name.startsWith("libtiff") }
	def zipFile = file(zipPath)
	def outputDir = file("${nativeLibHome}")
	
	from zipTree(zipFile)
	into outputDir
}

task generateLibTiffProjects(type:Exec, dependsOn: [unzipLibTiff, 
                                                    compileZlib, 
                                                    buildLibDeflateLibrary, 
                                                    buildJBigLibrary, 
                                                    compileLibJpegTurbo, 
                                                    buildLercLibrary, 
                                                    buildLibLzmaLibrary, 
                                                    buildZstdLibrary, 
                                                    buildWebpLibrary]) {
	workingDir "$libTiffHome"

	def zlibBin = "${zlibHome}".replace("\\", "/")
	def libDeflate = "${libDeflateHome}".replace("\\", "/")
 	def jpegIncDir = "${libJpegTurboHome}".replace("\\", "/")
	def jBigDir ="${jBigHome}".replace("\\", "/")
	def lercDir = "${lercHome}".replace("\\", "/")
	def lzmaDir = "${lzmaHome}".replace("\\", "/")
	def zstdDir = "${zstdHome}".replace("\\", "/")
	def webpDir = "${webpHome}".replace("\\", "/")
	
	commandLine "cmake",
				"-D", "BUILD_SHARED_LIBS=OFF",
				"-D", "ZLIB_LIBRARY=${zlibBin}/${vcConfig}/zlibstatic.lib",
				"-D", "ZLIB_INCLUDE_DIR=${zlibBin}",
				"-D", "Deflate_LIBRARY=${libDeflate}/Release/deflatestatic.lib",
				"-D", "Deflate_INCLUDE_DIR=${libDeflate}",
	            "-D", "JPEG_LIBRARY=${jpegIncDir}/jpeg-static.lib",
	            "-D", "JPEG_INCLUDE_DIR=${jpegIncDir}",
	        	"-D", "JBIG_LIBRARY=${jBigDir}/libjbig.lib",
	          	"-D", "JBIG_INCLUDE_DIR=${jBigDir}",
	        	"-D", "LERC_LIBRARY=${lercHome}/src/LercLib/LercLib.lib",
	        	"-D", "LERC_INCLUDE_DIR=${lercDir}/src/LercLib",
	        	"-D", "LIBLZMA_LIBRARY=${lzmaDir}/windows/vs2019/Release/x64/liblzma/liblzma.lib",
	        	"-D", "LIBLZMA_INCLUDE_DIR=${lzmaDir}/src/liblzma/api",
	        	"-D", "ZSTD_LIBRARY=${zstdDir}/build/cmake/lib/Release/zstd_static.lib",
	        	"-D", "ZSTD_INCLUDE_DIR=${zstdDir}/lib",
	        	"-D", "WebP_LIBRARY=${webpDir}/output/release-static/x64/lib/libwebp.lib",
	        	"-D", "WebP_INCLUDE_DIR=${webpDir}/src",
	            "."
}

task compileLibTiff(type:Exec, dependsOn: generateLibTiffProjects) {
	workingDir "$libTiffHome"

	// need this to use LIBLZMA
	environment['CL'] = "/DLZMA_API_STATIC"

	commandLine "msbuild", 
				"${libTiffHome}/tiff.sln",
				"-t:ALL_BUILD",
				"-p:Configuration=${vcConfig}",
				"-p:Platform=${vcPlatform}"
	javacppGenerate.dependsOn name
}

javacppGenerate {
	systemProperties['libtiff.src'] = "${libTiffHome}/libtiff"
	systemProperties["libtiff.bin.${vcConfig}"] = "${libTiffHome}/libtiff/${vcConfig}"
	systemProperties["libtiff.bin.zlib"] = "${zlibHome}/${vcConfig}"
	systemProperties["libtiff.bin.jpeg"] = "${libJpegTurboHome}"
	systemProperties["libtiff.bin.deflate"] = "${libDeflateHome}/Release"
	systemProperties["libtiff.bin.jbig"] = "${jBigHome}"
	systemProperties["libtiff.bin.lerc"] = "${lercHome}/src/LercLib"
	systemProperties["libtiff.bin.lzma"] = "${lzmaHome}/windows/vs2019/Release/x64/liblzma"
	systemProperties["libtiff.bin.zstd"] = "${zstdHome}/build/cmake/lib/Release"
	systemProperties["libtiff.bin.webp"] = "${webpHome}/output/release-static/x64/lib"
	
	debug = false
}

javacppJniGenerate {
	debug = false

	doFirst {
		args "-nodelete"
		args "-Xcompiler", "/Z7"
	}
}