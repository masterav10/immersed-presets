// inherit from buildSrc to prevent duplicates
Properties properties = new Properties()
FileInputStream input = new FileInputStream(file('buildSrc/gradle.properties'))
properties.load(input)
input.close()

for (String key : properties.stringPropertyNames()) {
	ext.set(key, properties.getProperty(key))
}

version "${javacppVersion}"

allprojects {
	group = 'org.bytedeco.presets'
	
	apply plugin: "eclipse"
	apply plugin: "java-library"
	
	sourceCompatibility = org.gradle.api.JavaVersion.VERSION_1_8
}

subprojects {
	repositories {
	    mavenLocal()
	    mavenCentral()
	    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
	}
	
	dependencies {		
		implementation platform("org.springframework.boot:spring-boot-dependencies:2.5.0")

		testImplementation 'org.springframework:spring-core'
		testImplementation "org.slf4j:slf4j-simple"	
		testImplementation 'org.junit.jupiter:junit-jupiter'
		testImplementation 'org.assertj:assertj-core'
		testImplementation 'org.mockito:mockito-core'
	}
	
	test {
		useJUnitPlatform()
		testLogging {
			events "passed", "skipped", "failed"
		}
	}
}

import java.nio.file.Paths;
import java.nio.file.Files;

// ensures the wrapper sets the VC runtime if we can find cl.exe
tasks.named('wrapper') {
	doLast {
		def file = Paths.get(scriptFile.toString() + ".bat");
		def lines = new ArrayList<>(Files.readAllLines(file));
		
		// location of compiler to use
		def vcvarsall = Paths.get("C:","Program Files (x86)","Microsoft Visual Studio",
		                      "2019","Community","VC","Auxiliary","Build","vcvars64.bat");
		
		lines.add(0, "where /q cl.exe || call \"${vcvarsall}\"");
		
		/*
		for(int i = 0; i < lines.size(); i++) {
			if(lines[i] == ':execute') {
				lines.add(i + 1, "where /q cl.exe || call \"${vcvarsall}\" amd64");
				break;
			}
		}
		*/
		
		Files.write(file, lines);
	}
}